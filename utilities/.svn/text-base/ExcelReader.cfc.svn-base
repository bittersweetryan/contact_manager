/**
* @accessors true
*/
component hint="Function to encapsulate reading an excel file using POI"{

	variables.workbook = {};

	variables.cells = {};

	variables.poiJars =  [
		"poi-3.7-20101029.jar",
		"poi-ooxml-3.7-20101029.jar",
		"poi-ooxml-schemas-3.7-20101029.jar",
		"poi-scratchpad-3.7-20101029.jar",
		"dom4j-1.6.1.jar",
		"geronimo-stax-api_1.0_spec-1.0.jar",
		"xmlbeans-2.3.0.jar",
		"commons-logging-1.1.jar",
		"log4j-1.2.13.jar"
	];

	variables.letterIndexHash = {A=1,B=2,C=3,D=4,E=5,F=6,G=7,H=8,I=9,J=10,K=11,L=12,M=13,N=14,O=15,P=16,Q=17,R=18,S=19,T=20,U=21,V=22,W=23,X=24,Y=25,Z=26};

	public ExcelReader function init(String jarPath = "")
	output=false hint="Im the constructor"{
		var i = 1;

		//if jarpath is blank try to setlib dir to current template path's lib dir
		if(arguments.jarPath == ""){
			arguments.jarPath = "#getDirectoryFromPath(getCurrentTemplatePath())#../lib/";
		}

		variables.workbook = {};

		for(i; i <= arrayLen(variables.poiJars); i++){
			variables.poiJars[i] = arguments.jarPath & variables.poiJars[i];
		}
		
		return this;
	}

	public any function getWorkbook(String workbookFilePath)
	output=false hint=""{

		loadWorkbook(arguments.workbookFilePath);

		return variables.workbook;
	}

	private void function loadWorkbook(String workbookFilePath)
	output=false hint="I use javaloader to init the POI Object"{

		var _Thread = createObject("java", "java.lang.Thread"); //using 'Thread' breaks CFB 
		var currentClassloader = _Thread.currentThread().getContextClassLoader(); 

		try{ 
			var loader = createObject("component", "javaloader.JavaLoader").init(loadPaths=poiJars,loadColdFusionClassPath=true); 
			
			//set the current thread's context class loader as Javaloader's classloader, so dom4j doesn't die 
			_Thread.currentThread().setContextClassLoader(loader.getURLClassLoader( )); 
			
			var extension = right(arguments.workbookFilePath,find(".",reverse(arguments.workbookFilePath)) -1 );
			var poiFS = {};

			if(extension == 'xls'){
				poiFS = loader.create("org.apache.poi.poifs.filesystem.POIFSFileSystem").init(
					createObject("java","java.io.FileInputStream").init(arguments.workbookFilePath)
				);

				variables.workbook = loader.create("org.apache.poi.ss.usermodel.WorkbookFactory").create(poiFS);	
			}
			else if(extension == 'xlsx'){

				poiFS = loader.create("org.apache.poi.openxml4j.opc.OPCPackage").open(
					createObject("java","java.io.FileInputStream").init(arguments.workbookFilePath)
				);	

				variables.workbook = loader.create("org.apache.poi.ss.usermodel.WorkbookFactory").create(poiFS);	
			}
			else{
				throw("Argument is not a proper excel document extension.");
			}
		} 
		catch(Any exc){ 
			rethrow; 
		} 
		finally 
		{ 
			_Thread.currentThread().setContextClassLoader(currentClassloader); 
		} 
	}

	public String function getValue(String cellName)
	output=false hint="Public API for getting the value of a cell"{
		if(structIsEmpty(variables.workbook)){
			throw("Please initialize a workbook first by calling getWorkbook.");
		}

		return getCellValue(arguments.cellName);
	}

	private String function getValueFromRef(String sheetName, numeric rowNumber, numeric colNumber)
	output=false hint="I get a value from a cell reference"{
		var sheet = variables.workbook.getSheet(arguments.sheetName);
		var row = sheet.getRow(arguments.rowNumber);
		var cell = row.getCell(arguments.colNumber);

		if(!isNull(cell)){
			switch(cell.getCellType()){
				case 0:
					value = cell.getNumericCellValue().toString();
					break;
				case 1:
				case 2:
					value = cell.getStringCellValue();
					break;
				case 3:
					value = "";
					break;
				case 4:
					value = cell.getBooleanCellValue.toString();
					break;
				case 5:
					value = "";
					break;
			}
		}
		return value;
	}

	private void function getCellValues()
	output=false hint="I get all the cellnames and turn them into an array"{
		var i = 0;
		var nameCount = workbook.getNumberOfNames();
		var hName = "";

		for(i; i < nameCount; i++){
			hName = variables.workbook.getNameAt(i);

			variables.cells["#hName.getNameName()#"]["cell"] = hName.getRefersToFormula();

			parseCellLocation(variables.cells["#hName.getNameName()#"]);

			variables.cells["#hName.getNameName()#"]["value"] = getValueFromRef(variables.cells["#hName.getNameName()#"].sheet,
																	variables.cells["#hName.getNameName()#"].row,
																	variables.cells["#hName.getNameName()#"].col);
		}
	}

	private String function getCellValue(String cellName)
	output=false hint=""{
		if(structIsEmpty(variables.cells)){
			getCellValues();
		}

		if(structKeyExists(variables.cells,arguments.cellName)){
			return variables.cells["#arguments.cellName#"].value;
		}
		else{
			return "";
		}
	}

	private void function parseCellLocation(Struct cellInfo)
	output=false hint="I parse a cell information into sheet row column"{
		var cellReference = cellInfo.cell;

		var separatorPos = find("!",cellReference);
		cellInfo.sheet = left(cellReference,separatorPos -1);
		var locationInformation = right(cellReference,separatorPos);
		var loc = reFindNoCase("\$([A-Z]+)\$(\d+)\b", locationInformation, 0, true);

		cellInfo.row = javaCast("int",mid(locationInformation,loc.pos[3],loc.len[3])-1);
		cellInfo.col = javaCast("int",getIntFromLetter(mid(locationInformation,loc.pos[2],loc.len[2])));
	}

	private numeric function getIntFromLetter(String letter, val = 0)
	output=false hint="I take a letter and get the numeric value of it"{
		var arr = listToArray(arguments.letter,"");

		if(arrayLen(arr) == 1){
			return (val + letterIndexHash["#arguments.letter#"]) - 1;
		}
		else{
			val = letterIndexHash["#arr[1]#"] * 26;

			arrayDeleteAt(arr,1);

			return getIntFromLetter("#arrayToList(arr,"")#",val);
		}
	}
}